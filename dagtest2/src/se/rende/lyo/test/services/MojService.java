/*******************************************************************************
 * Copyright (c) 2012 IBM Corporation and others.
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * and Eclipse Distribution License v. 1.0 which accompanies this distribution.
 *
 * The Eclipse Public License is available at http://www.eclipse.org/legal/epl-v10.html
 * and the Eclipse Distribution License is available at
 * http://www.eclipse.org/org/documents/edl-v10.php.
 *
 * Contributors:
 *
 *     Michael Fiedler     - initial API and implementation for Bugzilla adapter
 *     Jad El-khoury        - initial implementation of code generator (https://bugs.eclipse.org/bugs/show_bug.cgi?id=422448)
 *
 * This file is generated by org.eclipse.lyo.oslc4j.codegenerator
 *******************************************************************************/
package se.rende.lyo.test.services;

import java.io.IOException;
import java.io.PrintWriter;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.text.SimpleDateFormat;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.TreeSet;

import javax.servlet.RequestDispatcher;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.ws.rs.Consumes;
import javax.ws.rs.FormParam;
import javax.ws.rs.GET;
import javax.ws.rs.HeaderParam;
import javax.ws.rs.POST;
import javax.ws.rs.PUT;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.QueryParam;
import javax.ws.rs.WebApplicationException;
import javax.ws.rs.core.Context;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;
import javax.ws.rs.core.Response.Status;
import javax.ws.rs.core.UriInfo;
import javax.ws.rs.core.UriBuilder;

import org.eclipse.lyo.oslc4j.core.annotation.OslcCreationFactory;
import org.eclipse.lyo.oslc4j.core.annotation.OslcDialog;
import org.eclipse.lyo.oslc4j.core.annotation.OslcDialogs;
import org.eclipse.lyo.oslc4j.core.annotation.OslcQueryCapability;
import org.eclipse.lyo.oslc4j.core.annotation.OslcService;
import org.eclipse.lyo.oslc4j.core.model.Compact;
import org.eclipse.lyo.oslc4j.core.model.OslcConstants;
import org.eclipse.lyo.oslc4j.core.model.OslcMediaType;
import org.eclipse.lyo.oslc4j.core.model.Preview;
import org.eclipse.lyo.oslc4j.core.model.ServiceProvider;
import org.eclipse.lyo.oslc4j.core.model.Link;
import org.eclipse.lyo.oslc4j.core.model.AbstractResource;

import se.rende.lyo.test.DagtestManager;
import se.rende.lyo.test.DagtestConstants;
import se.rende.lyo.test.servlet.ServiceProviderCatalogSingleton;
import se.rende.lyo.test.resources.Moj;	

// Start of user code imports
// End of user code

// Start of user code pre_class_code
// End of user code

@OslcService(DagtestConstants.GREJ_DOMAIN)
@Path("serviceProviders/{serviceProviderId}/mojs")
public class MojService
{
	@Context private HttpServletRequest httpServletRequest;
	@Context private HttpServletResponse httpServletResponse;
	@Context private UriInfo uriInfo;

	// Start of user code class_attributes
	// End of user code
	
	// Start of user code class_methods
	// End of user code
	
    public MojService()
    {
        super();
    }

    /**
     * RDF/XML, XML and JSON representation of a change request collection
     * 
     * TODO:  add query support
     * 
     * @param productId
     * @param where
     * @param pageString
     * @return
     * @throws IOException
     * @throws ServletException
     */
    @OslcQueryCapability
    (
        title = "MojQuery",
        label = "mojquery",
        resourceShape = OslcConstants.PATH_RESOURCE_SHAPES + "/" + DagtestConstants.PATH_MOJ,
        resourceTypes = {DagtestConstants.TYPE_MOJ},
        usages = {OslcConstants.OSLC_USAGE_DEFAULT}
    ) 
    @GET 
    
    @Produces({OslcMediaType.APPLICATION_RDF_XML, OslcMediaType.APPLICATION_XML, OslcMediaType.APPLICATION_JSON})
    public Moj[] queryMojs(
													@PathParam("serviceProviderId") final String serviceProviderId ,
    		                                 		@QueryParam("oslc.where") final String where,
    		                                 		@QueryParam("page") final String pageString,
													@QueryParam("limit") final String limitString) throws IOException, ServletException 
    {
		int page=0;
		int limit=20;
		if (null != pageString) {
			page = Integer.parseInt(pageString);
		}
		if (null != limitString) {
			limit = Integer.parseInt(limitString);
		}
        
		// Start of user code queryMojs
		// End of user code

        final List<Moj> resources = DagtestManager.queryMojs(httpServletRequest, serviceProviderId, where, page, limit);
        return resources.toArray(new Moj [resources.size()]);
    }

    /**
     * HTML representation of change request collection
     * 
     * Forwards to changerequest_collection_html.jsp to build the html page
     * 
     * @param productId
     * @param changeRequestId
     * @param pageString
     * @return
     * @throws ServletException
     * @throws IOException
     */
	@GET
    
	@Produces({ MediaType.TEXT_HTML })
	public Response queryMojsAsHtml(
									@PathParam("serviceProviderId") final String serviceProviderId ,
                               		@QueryParam("oslc.where") final String where,
                               		@QueryParam("page") final String pageString,
			                        @QueryParam("limit") final String limitString) throws ServletException, IOException
	{
		int page=0;
		int limit=20;
		if (null != pageString) {
			page = Integer.parseInt(pageString);
		}
		if (null != limitString) {
			limit = Integer.parseInt(limitString);
		}

		// Start of user code queryMojsAsHtml
		// End of user code

        final List<Moj> resources = DagtestManager.queryMojs(httpServletRequest, serviceProviderId, where, page, limit);
		
        if (resources!= null) {
        	httpServletRequest.setAttribute("resources", resources);
			// Start of user code queryMojsAsHtml_setAttributes
			// End of user code

        	httpServletRequest.setAttribute("queryUri", 
                    uriInfo.getAbsolutePath().toString() + "?oslc.paging=true");
        	if (resources.size() > limit) {
        		resources.remove(resources.size() - 1);
        		httpServletRequest.setAttribute("nextPageUri", 
        				uriInfo.getAbsolutePath().toString() + "?oslc.paging=true&amp;page=" + (page + 1));
        	}
        	RequestDispatcher rd = httpServletRequest.getRequestDispatcher("/se/rende/lyo/test/mojscollection.jsp");
        	rd.forward(httpServletRequest,httpServletResponse);
        }
		
		throw new WebApplicationException(Status.NOT_FOUND);	
	}

	/**
	 * OSLC delegated selection dialog for change requests
	 * 
	 * If called without a "terms" parameter, forwards to changerequest_selector.jsp to 
	 * build the html for the IFrame
	 * 
	 * If called with a "terms" parameter, sends a Bug search to Bugzilla and then 
	 * forwards to changerequest_filtered_json.jsp to build a JSON response
	 * 
	 * 
	 * @param terms
	 * @param productId
	 * @throws ServletException
	 * @throws IOException
	 */

    @OslcDialog
    (
         title = "mojselectdialog",
         label = "mojselectdialog",
         uri = "serviceProviders/{serviceProviderId}/mojs/selector",
         hintWidth = "0px",
         hintHeight = "0px",
         resourceTypes = {DagtestConstants.TYPE_MOJ},
         usages = {OslcConstants.OSLC_USAGE_DEFAULT}
    )
	@GET
	@Path("selector")
	@Consumes({ MediaType.TEXT_HTML, MediaType.WILDCARD })
	public void MojSelector(
        @QueryParam("terms") final String terms
		, @PathParam("serviceProviderId") final String serviceProviderId
        ) throws ServletException, IOException
	{
		try {
			// Start of user code MojSelector_init
			// End of user code

			httpServletRequest.setAttribute("selectionUri",uriInfo.getAbsolutePath().toString());
			// Start of user code MojSelector_setAttributes
			// End of user code

			if (terms != null ) {
				httpServletRequest.setAttribute("terms", terms);
				final List<Moj> resources = DagtestManager.MojSelector(httpServletRequest, serviceProviderId, terms);      
				if (resources!= null) {
							httpServletRequest.setAttribute("resources", resources);
							RequestDispatcher rd = httpServletRequest.getRequestDispatcher("/se/rende/lyo/test/mojselectorresults.jsp"); 
							rd.forward(httpServletRequest, httpServletResponse);
				}
				//a empty search should return an empty list and not NULL!
				throw new WebApplicationException(Status.NOT_FOUND);	
			
			} else {
				try {	
					RequestDispatcher rd = httpServletRequest.getRequestDispatcher("/se/rende/lyo/test/mojselector.jsp"); 
					rd.forward(httpServletRequest, httpServletResponse);
				} catch (Exception e) {
					throw new ServletException(e);
				}
			}
		} catch (Exception e) {
			throw new WebApplicationException(e);
		}
	}

	/**
	 * Create a single BugzillaChangeRequest via RDF/XML, XML or JSON POST
	 * @param productId
	 * @param changeRequest
	 * @return
	 * @throws IOException
	 * @throws ServletException
	 */
	@OslcCreationFactory
	(
		 title = "mojcreator",
		 label = "mojcreator",
		 resourceShapes = {OslcConstants.PATH_RESOURCE_SHAPES + "/" + DagtestConstants.PATH_MOJ},
		 resourceTypes = {DagtestConstants.TYPE_MOJ},
		 usages = {OslcConstants.OSLC_USAGE_DEFAULT}
	)
    @POST
    @Path("qweqwe")
    @Consumes({OslcMediaType.APPLICATION_RDF_XML, OslcMediaType.APPLICATION_XML, OslcMediaType.APPLICATION_JSON})
    @Produces({OslcMediaType.APPLICATION_RDF_XML, OslcMediaType.APPLICATION_XML, OslcMediaType.APPLICATION_JSON})
    public Response createMoj(
            @PathParam("serviceProviderId") final String serviceProviderId , 
            final Moj aResource
        ) throws IOException, ServletException
    {
		try {
    		Moj newResource = DagtestManager.createMoj(httpServletRequest, aResource, serviceProviderId);
			httpServletResponse.setHeader("ETag", DagtestManager.getETagFromMoj(newResource));
	        return Response.created(newResource.getAbout()).entity(aResource).build();
    	} catch (Exception e) {
    		e.printStackTrace();
    		throw new WebApplicationException(e);
    	}
    }

    /**
     * OSLC delegated creation dialog for a single change request
     * 
     * Forwards to changerequest_creator.jsp to build the html form
     * 
     * @param productId
     * @throws IOException
     * @throws ServletException
     */
    @GET
	@Path("creator")
    @Consumes({MediaType.WILDCARD})
    public void MojCreator(
                @PathParam("serviceProviderId") final String serviceProviderId
        ) throws IOException, ServletException
    {
		// Start of user code MojCreator
		// End of user code

        httpServletRequest.setAttribute("serviceProviderId", serviceProviderId);

		RequestDispatcher rd = httpServletRequest.getRequestDispatcher("/se/rende/lyo/test/mojcreator.jsp");
		rd.forward(httpServletRequest, httpServletResponse);
    }

    /**
     * Backend creator for the OSLC delegated creation dialog. 
     * 
     * Accepts the input in FormParams and returns a small JSON response
     * 
     * @param productId
     * @param component
     * @param version
     * @param summary
     * @param op_sys
     * @param platform
     * @param description
     */
    @OslcDialog
	(
         title = "mojcreatedialog",
         label = "mojcreatedialog",
         uri = "serviceProviders/{serviceProviderId}/mojs/creator",
         hintWidth = "0px",
         hintHeight = "0px",
         resourceTypes = {DagtestConstants.TYPE_MOJ},
         usages = {OslcConstants.OSLC_USAGE_DEFAULT}
	)
    @POST
	@Path("creator")
    @Consumes({ MediaType.APPLICATION_FORM_URLENCODED})
    public void createMoj(
            @PathParam("serviceProviderId") final String serviceProviderId
        )
    {
    	try {
			Moj newResource = null;

			Moj aResource = new Moj();

    		String[] paramValues;

				paramValues = httpServletRequest.getParameterValues("name");
				if (paramValues != null) {
						if (paramValues.length == 1) {
							if (paramValues[0].length() != 0)
								aResource.setName(paramValues[0]);
							// else, there is an empty value for that parameter, and hence ignore since the parameter is not actually set.
						} 
					
				}			
      
    		newResource = DagtestManager.createMoj(httpServletRequest, aResource, serviceProviderId);

			if (newResource != null) {
	    		httpServletRequest.setAttribute("newResource", newResource);
	    		httpServletRequest.setAttribute("newResourceUri", newResource.getAbout().toString());
	
	    		// Send back to the form a small JSON response
	    		httpServletResponse.setContentType("application/json");
	    		httpServletResponse.setStatus(Status.CREATED.getStatusCode());
	    		httpServletResponse.addHeader("Location", newResource.getAbout().toString());
	    		PrintWriter out = httpServletResponse.getWriter();
	    		out.print("{" + "\"resource\" : \"" + newResource.getAbout().toString() + "\"}");
	    		out.close();
			}
    	} catch (Exception e) {
    		e.printStackTrace();
    		throw new WebApplicationException(e);
    	}
    }

	/**
	 * RDF/XML, XML and JSON representation of a single change request
	 * 
	 * @param productId
	 * @param changeRequestId
	 * @return
	 * @throws IOException
	 * @throws ServletException
	 * @throws URISyntaxException
	 */
    @GET
    @Path("{mojId}")
    @Produces({OslcMediaType.APPLICATION_RDF_XML, OslcMediaType.APPLICATION_XML, OslcMediaType.APPLICATION_JSON})
    public Moj getMoj(
                @PathParam("serviceProviderId") final String serviceProviderId, @PathParam("mojId") final String mojId
        ) throws IOException, ServletException, URISyntaxException
    {
		// Start of user code getResource_init
		// End of user code

        final Moj aMoj = DagtestManager.getMoj(httpServletRequest, serviceProviderId, mojId);

        if (aMoj != null) {
			// Start of user code getMoj
			// End of user code
            return aMoj;
        }

        throw new WebApplicationException(Status.NOT_FOUND);
    }
    
    /**
     * 
     * HTML representation for a single change request  - redirect the request directly to Bugzilla
     * 
     * @param productId
     * @param changeRequestId
     * @throws ServletException
     * @throws IOException
     * @throws URISyntaxException
     */
	@GET
    @Path("{mojId}")
	@Produces({ MediaType.TEXT_HTML })
	public Response getMojAsHtml(
        @PathParam("serviceProviderId") final String serviceProviderId, @PathParam("mojId") final String mojId
        ) throws ServletException, IOException, URISyntaxException
	{	
		// Start of user code getMojAsHtml_init
		// End of user code

        final Moj aMoj = DagtestManager.getMoj(httpServletRequest, serviceProviderId, mojId);

        if (aMoj != null) {
        	httpServletRequest.setAttribute("aMoj", aMoj);
			// Start of user code getMojAsHtml_setAttributes
			// End of user code

        	RequestDispatcher rd = httpServletRequest.getRequestDispatcher("/se/rende/lyo/test/moj.jsp");
        	rd.forward(httpServletRequest,httpServletResponse);
		}

        throw new WebApplicationException(Status.NOT_FOUND);
	}
}
